/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.illud.freightgw.client.freight.api;

import com.illud.freightgw.client.freight.model.Freight;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-09-18T10:06:28.627+05:30[Asia/Calcutta]")

@Api(value = "FreightResource", description = "the FreightResource API")
public interface FreightResourceApi {

    @ApiOperation(value = "createFreight", nickname = "createFreightUsingPOST", notes = "", response = Freight.class, tags={ "freight-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Freight.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/freights",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Freight> createFreightUsingPOST(@ApiParam(value = "freight" ,required=true )  @Valid @RequestBody Freight freight);


    @ApiOperation(value = "deleteFreight", nickname = "deleteFreightUsingDELETE", notes = "", tags={ "freight-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/freights/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFreightUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getAllFreights", nickname = "getAllFreightsUsingGET", notes = "", response = Freight.class, responseContainer = "List", tags={ "freight-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Freight.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/freights",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Freight>> getAllFreightsUsingGET();


    @ApiOperation(value = "getFreight", nickname = "getFreightUsingGET", notes = "", response = Freight.class, tags={ "freight-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Freight.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/freights/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Freight> getFreightUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "searchFreights", nickname = "searchFreightsUsingGET", notes = "", response = Freight.class, responseContainer = "List", tags={ "freight-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Freight.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/_search/freights",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Freight>> searchFreightsUsingGET(@NotNull @ApiParam(value = "query", required = true) @Valid @RequestParam(value = "query", required = true) String query);


    @ApiOperation(value = "updateFreight", nickname = "updateFreightUsingPUT", notes = "", response = Freight.class, tags={ "freight-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Freight.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/freights",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Freight> updateFreightUsingPUT(@ApiParam(value = "freight" ,required=true )  @Valid @RequestBody Freight freight);

}
